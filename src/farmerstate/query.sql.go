// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package farmerstate

import (
	"context"
	"database/sql"
)

const deleteFarmerRecord = `-- name: DeleteFarmerRecord :exec
DELETE FROM farmer_state
WHERE id = ?
`

func (q *Queries) DeleteFarmerRecord(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteFarmerRecord, id)
	return err
}

const deleteLegacyFarmerstate = `-- name: DeleteLegacyFarmerstate :exec
DELETE FROM farmer_state
WHERE id = ? AND key = 'legacy'
`

func (q *Queries) DeleteLegacyFarmerstate(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteLegacyFarmerstate, id)
	return err
}

const getAllLegacyFarmerstate = `-- name: GetAllLegacyFarmerstate :many
SELECT id, "key", value FROM farmer_state
WHERE key = 'legacy'
`

func (q *Queries) GetAllLegacyFarmerstate(ctx context.Context) ([]FarmerState, error) {
	rows, err := q.db.QueryContext(ctx, getAllLegacyFarmerstate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FarmerState
	for rows.Next() {
		var i FarmerState
		if err := rows.Scan(&i.ID, &i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLegacyFarmerstate = `-- name: GetLegacyFarmerstate :one
SELECT id, "key", value FROM farmer_state
WHERE id = ? AND key = 'legacy' LIMIT 1
`

func (q *Queries) GetLegacyFarmerstate(ctx context.Context, id string) (FarmerState, error) {
	row := q.db.QueryRowContext(ctx, getLegacyFarmerstate, id)
	var i FarmerState
	err := row.Scan(&i.ID, &i.Key, &i.Value)
	return i, err
}

const getUserIdFromEiIgn = `-- name: GetUserIdFromEiIgn :one
SELECT
    id
    --json_extract(value, '$.MiscSettingsString.ei_ign') AS ei_ign
FROM
    farmer_state
WHERE
    -- Exclude records where the extracted value is NULL
    json_extract(value, '$.MiscSettingsString.ei_ign') = ? LIMIT 1
`

func (q *Queries) GetUserIdFromEiIgn(ctx context.Context, value sql.NullString) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserIdFromEiIgn, value)
	var id string
	err := row.Scan(&id)
	return id, err
}

const insertLegacyFarmerstate = `-- name: InsertLegacyFarmerstate :one
INSERT INTO farmer_state (id, key, value)
VALUES (?, 'legacy', ?)
RETURNING id, "key", value
`

type InsertLegacyFarmerstateParams struct {
	ID    string
	Value sql.NullString
}

func (q *Queries) InsertLegacyFarmerstate(ctx context.Context, arg InsertLegacyFarmerstateParams) (FarmerState, error) {
	row := q.db.QueryRowContext(ctx, insertLegacyFarmerstate, arg.ID, arg.Value)
	var i FarmerState
	err := row.Scan(&i.ID, &i.Key, &i.Value)
	return i, err
}

const updateLegacyFarmerstate = `-- name: UpdateLegacyFarmerstate :one
UPDATE farmer_state
SET value = ?
WHERE id = ? AND key = 'legacy'
RETURNING id, "key", value
`

type UpdateLegacyFarmerstateParams struct {
	Value sql.NullString
	ID    string
}

func (q *Queries) UpdateLegacyFarmerstate(ctx context.Context, arg UpdateLegacyFarmerstateParams) (FarmerState, error) {
	row := q.db.QueryRowContext(ctx, updateLegacyFarmerstate, arg.Value, arg.ID)
	var i FarmerState
	err := row.Scan(&i.ID, &i.Key, &i.Value)
	return i, err
}
