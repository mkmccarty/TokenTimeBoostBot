// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package boost

import (
	"context"
	"database/sql"
)

const deleteContract = `-- name: DeleteContract :exec
DELETE FROM contract_data
WHERE channelID = ? AND contractID = ? AND coopID = ?
`

type DeleteContractParams struct {
	Channelid  string
	Contractid string
	Coopid     string
}

func (q *Queries) DeleteContract(ctx context.Context, arg DeleteContractParams) error {
	_, err := q.db.ExecContext(ctx, deleteContract, arg.Channelid, arg.Contractid, arg.Coopid)
	return err
}

const getActiveContracts = `-- name: GetActiveContracts :many
SELECT value->>'ContractHash' AS ContractHash,value FROM contract_data WHERE value->>'State' != 4
`

type GetActiveContractsRow struct {
	Contracthash interface{}
	Value        sql.NullString
}

func (q *Queries) GetActiveContracts(ctx context.Context) ([]GetActiveContractsRow, error) {
	rows, err := q.db.QueryContext(ctx, getActiveContracts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActiveContractsRow
	for rows.Next() {
		var i GetActiveContractsRow
		if err := rows.Scan(&i.Contracthash, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContractByChannelID = `-- name: GetContractByChannelID :one
SELECT channelid, contractid, coopid, value FROM contract_data
WHERE channelID = ?
`

func (q *Queries) GetContractByChannelID(ctx context.Context, channelid string) (ContractDatum, error) {
	row := q.db.QueryRowContext(ctx, getContractByChannelID, channelid)
	var i ContractDatum
	err := row.Scan(
		&i.Channelid,
		&i.Contractid,
		&i.Coopid,
		&i.Value,
	)
	return i, err
}

const insertContract = `-- name: InsertContract :exec
INSERT INTO contract_data (channelID, contractID, coopID, value)
VALUES (?, ?, ?, ?)
`

type InsertContractParams struct {
	Channelid  string
	Contractid string
	Coopid     string
	Value      sql.NullString
}

func (q *Queries) InsertContract(ctx context.Context, arg InsertContractParams) error {
	_, err := q.db.ExecContext(ctx, insertContract,
		arg.Channelid,
		arg.Contractid,
		arg.Coopid,
		arg.Value,
	)
	return err
}

const updateContract = `-- name: UpdateContract :execrows
UPDATE contract_data
SET value = ?
WHERE channelID = ? AND contractID = ? AND coopID = ?
`

type UpdateContractParams struct {
	Value      sql.NullString
	Channelid  string
	Contractid string
	Coopid     string
}

func (q *Queries) UpdateContract(ctx context.Context, arg UpdateContractParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateContract,
		arg.Value,
		arg.Channelid,
		arg.Contractid,
		arg.Coopid,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateContractCoopID = `-- name: UpdateContractCoopID :exec
UPDATE contract_data
SET coopID = ?
WHERE channelID = ? AND contractID = ? AND coopID = ?
`

type UpdateContractCoopIDParams struct {
	Coopid     string
	Channelid  string
	Contractid string
	Coopid_2   string
}

func (q *Queries) UpdateContractCoopID(ctx context.Context, arg UpdateContractCoopIDParams) error {
	_, err := q.db.ExecContext(ctx, updateContractCoopID,
		arg.Coopid,
		arg.Channelid,
		arg.Contractid,
		arg.Coopid_2,
	)
	return err
}

const updateContractState = `-- name: UpdateContractState :exec
UPDATE contract_data
SET value = json_replace(value, '$.State', ?)
WHERE channelID = ? AND contractID = ? AND coopID = ?
`

type UpdateContractStateParams struct {
	JsonReplace interface{}
	Channelid   string
	Contractid  string
	Coopid      string
}

func (q *Queries) UpdateContractState(ctx context.Context, arg UpdateContractStateParams) error {
	_, err := q.db.ExecContext(ctx, updateContractState,
		arg.JsonReplace,
		arg.Channelid,
		arg.Contractid,
		arg.Coopid,
	)
	return err
}
